From fc17a2b017d13bae5ecc6fb3297a77bae66467ef Mon Sep 17 00:00:00 2001
From: unknown <stephanie.zhongsui.li@gmail.com>
Date: Mon, 1 Dec 2014 19:00:54 -0500
Subject: [PATCH 11/14] Associated minions with special card usages with
 specific CardAction child classes

Each of the three cards mentioned in change 9/14 now has a specific CardAction instead of the base CardAction. For example, the Nightblade card's action was instantiated as a CardActionNightBlade object.

---
 .../card/minion/concrete/ArchmageAntonidas.java    | 36 ++--------------------
 .../hearthsim/card/minion/concrete/Nightblade.java | 34 ++------------------
 .../card/minion/concrete/VioletTeacher.java        | 31 ++-----------------
 3 files changed, 8 insertions(+), 93 deletions(-)

diff --git a/src/main/java/com/hearthsim/card/minion/concrete/ArchmageAntonidas.java b/src/main/java/com/hearthsim/card/minion/concrete/ArchmageAntonidas.java
index 49ecd40..57eaf23 100644
--- a/src/main/java/com/hearthsim/card/minion/concrete/ArchmageAntonidas.java
+++ b/src/main/java/com/hearthsim/card/minion/concrete/ArchmageAntonidas.java
@@ -1,6 +1,8 @@
 package com.hearthsim.card.minion.concrete;
 
 import com.hearthsim.card.Card;
+import com.hearthsim.card.CardActionArchmageAntonidas;
+import com.hearthsim.card.CardActionNightblade;
 import com.hearthsim.card.Deck;
 import com.hearthsim.card.minion.Minion;
 import com.hearthsim.card.spellcard.SpellCard;
@@ -22,38 +24,6 @@ public class ArchmageAntonidas extends Minion {
         heroTargetable_ = HERO_TARGETABLE;
         summoned_ = SUMMONED;
         transformed_ = TRANSFORMED;
-	}
-	/**
-	 * 
-	 * Called whenever another card is used
-	 * 
-	 * When you cast a spell, put a Fireball spell into your hand
-	 *  @param thisCardPlayerSide The player index of the card receiving the event
-	 * @param cardUserPlayerSide
-     * @param usedCard The card that was used
-     * @param boardState The BoardState before this card has performed its action.  It will be manipulated and returned.
-     * @param deckPlayer0 The deck of player0
-     * @param deckPlayer1 The deck of player1
-     * @return The boardState is manipulated and returned
-	 */
-	@Override
-	public HearthTreeNode otherCardUsedEvent(
-			PlayerSide thisCardPlayerSide,
-			PlayerSide cardUserPlayerSide,
-			Card usedCard,
-			HearthTreeNode boardState,
-			Deck deckPlayer0,
-			Deck deckPlayer1)
-		throws HSException
-	{
-		HearthTreeNode toRet = super.otherCardUsedEvent(thisCardPlayerSide, cardUserPlayerSide, usedCard, boardState, deckPlayer0, deckPlayer1);
-		if (thisCardPlayerSide != PlayerSide.CURRENT_PLAYER)
-			return toRet;
-		if (isInHand_)
-			return toRet;
-        if (usedCard instanceof SpellCard && toRet.data_.getNumCardsHandCurrentPlayer() < 10) {
-            toRet.data_.placeCardHandCurrentPlayer(new Fireball());
-        }
-        return toRet;
+        action = new CardActionArchmageAntonidas(this);
 	}
 }
diff --git a/src/main/java/com/hearthsim/card/minion/concrete/Nightblade.java b/src/main/java/com/hearthsim/card/minion/concrete/Nightblade.java
index 0bf61a9..f06f7d1 100644
--- a/src/main/java/com/hearthsim/card/minion/concrete/Nightblade.java
+++ b/src/main/java/com/hearthsim/card/minion/concrete/Nightblade.java
@@ -1,5 +1,6 @@
 package com.hearthsim.card.minion.concrete;
 
+import com.hearthsim.card.CardActionNightblade;
 import com.hearthsim.card.Deck;
 import com.hearthsim.card.minion.Minion;
 import com.hearthsim.exception.HSException;
@@ -20,38 +21,7 @@ public class Nightblade extends Minion {
         heroTargetable_ = HERO_TARGETABLE;
         summoned_ = SUMMONED;
         transformed_ = TRANSFORMED;
+        action = new CardActionNightblade(this);
 	}
 	
-	/**
-	 * 
-	 * Override for battlecry
-	 * 
-	 * Battlecry: Heals friendly characters for 2
-	 * 
-	 *
-     *
-     *
-     * @param side
-     * @param targetMinion The target minion (can be a Hero).  If it is a Hero, then the minion is placed on the last (right most) spot on the board.
-     * @param boardState The BoardState before this card has performed its action.  It will be manipulated and returned.
-     * @param deckPlayer0 The deck of player0
-     * @return The boardState is manipulated and returned
-	 */
-	@Override
-	public HearthTreeNode useOn(
-			PlayerSide side,
-			Minion targetMinion,
-			HearthTreeNode boardState,
-			Deck deckPlayer0,
-			Deck deckPlayer1,
-			boolean singleRealizationOnly)
-		throws HSException
-	{
-		HearthTreeNode toRet = super.use_core(side, targetMinion, boardState, deckPlayer0, deckPlayer1, singleRealizationOnly);
-
-		if (toRet != null) 
-			toRet = toRet.data_.getWaitingPlayerHero().takeDamage((byte)3, PlayerSide.CURRENT_PLAYER, PlayerSide.WAITING_PLAYER, boardState, deckPlayer0, deckPlayer1, false, false);
-		
-		return toRet;
-	}
 }
diff --git a/src/main/java/com/hearthsim/card/minion/concrete/VioletTeacher.java b/src/main/java/com/hearthsim/card/minion/concrete/VioletTeacher.java
index b9a6fdb..1b53357 100644
--- a/src/main/java/com/hearthsim/card/minion/concrete/VioletTeacher.java
+++ b/src/main/java/com/hearthsim/card/minion/concrete/VioletTeacher.java
@@ -1,6 +1,8 @@
 package com.hearthsim.card.minion.concrete;
 
 import com.hearthsim.card.Card;
+import com.hearthsim.card.CardActionArchmageAntonidas;
+import com.hearthsim.card.CardActionVioletTeacher;
 import com.hearthsim.card.Deck;
 import com.hearthsim.card.minion.Minion;
 import com.hearthsim.card.spellcard.SpellCard;
@@ -21,34 +23,7 @@ public class VioletTeacher extends Minion {
         heroTargetable_ = HERO_TARGETABLE;
         summoned_ = SUMMONED;
         transformed_ = TRANSFORMED;
-	}
-	
-	/**
-	 * 
-	 * Called whenever another card is used
-	 * 
-	 * When you cast a spell, summon a 1/1 Violet Apprentice
-	 *  @param thisCardPlayerSide The player index of the card receiving the event
-	 * @param cardUserPlayerSide
-     * @param usedCard The card that was used
-     * @param boardState The BoardState before this card has performed its action.  It will be manipulated and returned.
-     * @param deckPlayer0 The deck of player0
-     * @param deckPlayer1 The deck of player1
-     * @return The boardState is manipulated and returned
-	 * @throws HSException 
-	 */
-	@Override
-	public HearthTreeNode otherCardUsedEvent(PlayerSide thisCardPlayerSide, PlayerSide cardUserPlayerSide, Card usedCard, HearthTreeNode boardState, Deck deckPlayer0, Deck deckPlayer1) throws HSException {
-		HearthTreeNode toRet = super.otherCardUsedEvent(thisCardPlayerSide, cardUserPlayerSide, usedCard, boardState, deckPlayer0, deckPlayer1);
-		if (thisCardPlayerSide != PlayerSide.CURRENT_PLAYER)
-			return toRet;
-		if (isInHand_)
-			return toRet;
-        if (usedCard instanceof SpellCard && PlayerSide.CURRENT_PLAYER.getPlayer(toRet).getNumMinions() < 7) {
-            Minion newMinion = new VioletApprentice();
-            toRet = newMinion.summonMinion(thisCardPlayerSide, this, toRet, deckPlayer0, deckPlayer1, false);
-        }
-        return toRet;
+        action = new CardActionVioletTeacher(this);
 	}
 
 }
-- 
1.9.4.msysgit.1

