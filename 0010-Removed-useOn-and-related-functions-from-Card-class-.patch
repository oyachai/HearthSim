From ea975bafb7520562fd2e6b1a004847d76ec9c7eb Mon Sep 17 00:00:00 2001
From: unknown <stephanie.zhongsui.li@gmail.com>
Date: Mon, 1 Dec 2014 18:58:24 -0500
Subject: [PATCH 10/14] Removed useOn and related functions from Card class
 that were delegated to the CardAction class

All methods delegated to CardAction were removed from Card in order to preserve the Card model.

---
 src/main/java/com/hearthsim/card/Card.java | 104 -----------------------------
 1 file changed, 104 deletions(-)

diff --git a/src/main/java/com/hearthsim/card/Card.java b/src/main/java/com/hearthsim/card/Card.java
index 06d81d6..9dbdffe 100644
--- a/src/main/java/com/hearthsim/card/Card.java
+++ b/src/main/java/com/hearthsim/card/Card.java
@@ -213,84 +213,6 @@ public class Card implements DeepCopyable {
     }
 
        
-	public final HearthTreeNode useOn(
-			PlayerSide side,
-			Minion targetMinion,
-			HearthTreeNode boardState,
-			Deck deckPlayer0,
-			Deck deckPlayer1)
-		throws HSException
-	{
-		return this.useOn(side, targetMinion, boardState, deckPlayer0, deckPlayer1, false);
-	}    
-    
-	/**
-	 * 
-	 * Use the card on the given target
-	 * 
-	 *
-     *
-     *
-     * @param side
-     * @param targetMinion The target minion (can be a Hero)
-     * @param boardState The BoardState before this card has performed its action.  It will be manipulated and returned.
-     * @param deckPlayer0 The deck for player0
-     * @param deckPlayer1 The deck for player1
-     * @param singleRealizationOnly For cards with random effects, setting this to true will return only a single realization of the random event.
-     *
-     * @return The boardState is manipulated and returned
-	 */
-    
-	public HearthTreeNode useOn(
-			PlayerSide side,
-			Minion targetMinion,
-			HearthTreeNode boardState,
-			Deck deckPlayer0,
-			Deck deckPlayer1,
-			boolean singleRealizationOnly)
-		throws HSException
-	{
-		//A generic card does nothing except for consuming mana
-		HearthTreeNode toRet = this.use_core(side, targetMinion, boardState, deckPlayer0, deckPlayer1, singleRealizationOnly);
-
-		//Notify all other cards/characters of the card's use
-		if (toRet != null) {
-			ArrayList<Minion> tmpList = new ArrayList<Minion>(7);
-            for (Card card : toRet.data_.getCurrentPlayerHand()) {
-                toRet = card.otherCardUsedEvent(PlayerSide.CURRENT_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-            }
-			toRet = toRet.data_.getCurrentPlayerHero().otherCardUsedEvent(PlayerSide.CURRENT_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-			{
-                for (Minion minion : PlayerSide.CURRENT_PLAYER.getPlayer(toRet).getMinions()) {
-                    tmpList.add(minion);
-                }
-				for (Minion minion : tmpList) {
-					if (!minion.isSilenced())
-						toRet = minion.otherCardUsedEvent(PlayerSide.CURRENT_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-				}
-			}
-            for (Card card : toRet.data_.getWaitingPlayerHand()) {
-                toRet = card.otherCardUsedEvent(PlayerSide.WAITING_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-            }
-			toRet = toRet.data_.getWaitingPlayerHero().otherCardUsedEvent(PlayerSide.WAITING_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-			{
-				tmpList.clear();
-                for (Minion minion : PlayerSide.WAITING_PLAYER.getPlayer(toRet).getMinions()) {
-                    tmpList.add(minion);
-                }
-				for (Minion minion : tmpList) {
-					if (!minion.isSilenced())
-						toRet = minion.otherCardUsedEvent(PlayerSide.WAITING_PLAYER, PlayerSide.CURRENT_PLAYER, this, toRet, deckPlayer0, deckPlayer1);
-				}
-			}
-
-			//check for and remove dead minions
-			toRet = BoardStateFactoryBase.handleDeadMinions(toRet, deckPlayer0, deckPlayer1);			
-		}
-		
-		
-		return toRet;
-	}
 
 	/**
 	 * 
@@ -324,32 +246,6 @@ public class Card implements DeepCopyable {
 	//======================================================================================
 	// Hooks for various events
 	//======================================================================================	
-	/**
-	 * 
-	 * Called whenever another card is used
-	 *  @param thisCardPlayerSide The player index of the card receiving the event
-	 * @param cardUserPlayerSide
-     * @param usedCard The card that was used
-     * @param boardState The BoardState before this card has performed its action.  It will be manipulated and returned.
-     * @param deckPlayer0 The deck of player0
-     * @param deckPlayer1 The deck of player1
-     * @return The boardState is manipulated and returned
-	 */
-	public HearthTreeNode otherCardUsedEvent(
-			PlayerSide thisCardPlayerSide,
-			PlayerSide cardUserPlayerSide,
-			Card usedCard,
-			HearthTreeNode boardState,
-			Deck deckPlayer0,
-			Deck deckPlayer1)
-		throws HSException
-	{
-		return boardState;
-	}
-
-	
-	
-	
 	
 	public JSONObject toJSON() {
 		JSONObject json = new JSONObject();
-- 
1.9.4.msysgit.1

